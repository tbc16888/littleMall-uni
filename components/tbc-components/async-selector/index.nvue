<template>
	<uni-popup ref="popup" type="bottom">
		<view class="tbc-flex-col" style="flex-direction: column;background-color: #FFFFFF;">
			<view class="tbc-flex-row"
				style="height:100rpx;align-items: center;justify-content: center;flex-direction: row;border-bottom-width: 0px;border-color: #EEE;border-style: solid;background-color: #F7F7f7;">
				<view style="width: 100rpx;"></view>
				<view style="flex: 1;align-items: center;justify-content: center;">
					<text style="color: #333;font-size: 28rpx;">{{title}}</text>
				</view>
				<view style="width: 100rpx;" @click="confirmSelected()">
					<text style="color: #333;font-size: 28rpx;">确定</text>
				</view>
			</view>
			<view
				style="height:90rpx;border-bottom-width: 1px;border-color: #EFEFEF;border-style: solid;background-color: #FFF;flex-direction: row;"
				class="tbc-flex-row">
				<scroll-view style="width: 750rpx;padding-right: 30rpx;" scroll-x :show-scrollbar="false"
					:scroll-left="scrollLeft" scroll-with-animation="true">
					<view class="tbc-flex-row" style="flex-direction: row;height:90rpx;">
						<view class="tbc-flex-row channel-item"
							style="align-items: center;justify-content: center;position: relative;margin-left: 30rpx;margin-right: 30rpx;flex-direction: row;"
							v-for="(item, index) in tabBarList" :key="index" @click="onClickTabBarItem(index)"
							ref="tabBarItem">
							<text style="font-size: 28rpx;color: #333;">{{item.label}}</text>
							<view
								style="position: absolute;width: 30rpx;height: 8rpx;background-color: #db0018;bottom: 0;border-radius: 8rpx;"
								v-if="index === tabBarIndex"></view>
						</view>
					</view>
				</scroll-view>
			</view>

			<scroll-view style="height:700rpx;width: 750rpx;" scroll-y>
				<view v-for="(tabbarItem, idx) in tabBarList" :key="idx" v-if="idx === tabBarIndex">
					<view class="tbc-flex-row"
						style="flex-direction: row;align-items: center;position: relative;padding: 30rpx;width:750rpx;border-bottom-width: 0px;border-style: solid;border-color: #F5F5F5;"
						hover-class="hover" v-for="(item, index) in tabbarItem.data" :key="index"
						@click="onClickDataItem(item, index)">
						<text style="font-size: 28rpx;color: #333;">{{item.label}}</text>
					</view>
				</view>
			</scroll-view>
		</view>
	</uni-popup>
</template>
<script>
	import uniPopup from '@/components/uni-official/uni-popup/uni-popup.vue'
	export default {
		components: {
			uniPopup
		},

		props: {

			title: {
				type: String,
				default () {
					return '请选择'
				}
			},

			api: {
				type: String,
				default: ''
			},


			field: {
				type: String,
				default () {
					return 'pid'
				}
			},

			leaf: {
				type: String,
				default () {
					return 'leaf'
				}
			},

			level: {
				type: [Number, String],
				default: 10
			},

			index: {
				type: Number,
				default () {
					return -1
				}
			}
		},

		data() {
			return {
				tabBarList: [],
				tabBarIndex: 0,
				tabBarSelected: [],
				defaultSelected: [],
				scrollLeft: 0,
				scrollToLeft: 0,
				tabTotalWidth: 0,
				isInit: false,
			}
		},

		computed: {
			dataList() {
				return this.tabBarList.length ? this.tabBarList[this.tabBarIndex].data : []
			}
		},

		methods: {

			// 初始化
			init() {
				this.addTarBarItem()
				// this.tabClick(0)
				this.getPickerData('')
				uni.getSystemInfo({
					complete: function(res) {
						console.log(res)
					}
				})
			},

			// 添加tabBar
			addTarBarItem() {
				this.tabBarList.push({
					label: '请选择',
					data: []
				})
			},

			// 点击tabbar
			onClickTabBarItem(index) {
				this.tabBarIndex = index
				this.tabBarList[this.tabBarIndex].label = '请选择'
				this.tabBarList.splice(this.tabBarIndex + 1)
				this.tabBarSelected.splice(this.tabBarIndex)
			},

			// 点击数据栏
			onClickDataItem(data, index) {
				let tabBarIndex = this.tabBarIndex
				this.tabBarSelected[tabBarIndex] = data
				this.tabBarList.splice(tabBarIndex + 1)
				this.tabBarSelected.splice(tabBarIndex + 1)
				this.tabBarList[tabBarIndex].label = data.label
				if (!data[this.leaf] || this.tabBarSelected.length >= this.level) return this.confirmSelected()
				this.tabBarIndex++
				this.addTarBarItem()
				this.getPickerData(data.value)
				this.scrollTabBar()
			},

			scrollTabBar() {
				setTimeout(() => {
					// 40 90 40 40 90 100 40 90
					// #ifndef APP-NVUE
					this.scrollLeft += 414
					// #endif
				}, 100)
			},






			// 监听tab导航栏滚动
			_listenTabScroll(e) {
				this.scrollLeft = e.detail.scrollLeft
			},

			// 滚动 tab 导航栏
			_scrollTab() {
				setTimeout(() => {

				}, 20)
			},

			open() {
				this.$refs.popup.open()
				if (!this.isInit) this.init()
			},


			// 设置选中
			setSelected(data) {
				this.defaultSelected = data
				this.tabbarIndex = 0
				if (!this.isInit) return this.init()
				this.detectDefaultSelected(this.tabBarList[this.tabBarIndex].data)
			},


			// 加载数据
			async getPickerData(id) {
				let params = {}
				params[this.field] = id
				const res = await uni.$http.get(this.api, params)
				if (res.data.code !== 0) {
					return uni.showToast({
						title: res.data.message,
						icon: 'none'
					})
				}
				let data = []
				if (res.data.code === 0) data = res.data.data.list
				this.tabBarList[this.tabBarIndex].data = data
				this.detectDefaultSelected(data)
				this.isInit = true
			},

			// 检查选中
			detectDefaultSelected(data) {
				if (!this.defaultSelected.length) return
				if (this.defaultSelected.length <= this.tabIndex) {
					this.confirmSelected()
					this.defaultSelected = []
				} else {
					data.forEach(item => {
						if (item.value == this.defaultSelected[this.tabBarIndex]) {
							this.onClickDataItem(item, this.tabBarIndex)
						}
					})
				}
			},

			// 确定
			confirmSelected() {
				let value = []
				let label = []
				this.tabBarSelected.forEach(item => {
					value.push(item.value)
					label.push(item.label)
				})
				this.$emit('select', {
					data: this.tabBarSelected,
					value,
					label,
					index: this.index
				})
				this.$refs.popup.close()
			},

			onClose() {
				console.log('onClose')
			}
		}
	}
</script>
<style>
	.hover {
		background-color: #F5F5F5;
	}
</style>
