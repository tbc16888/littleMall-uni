<template>
	<view></view>
</template>

<script>
	export default {
		data() {
			return {
				config: {},
				lastConfigTime: 0,
				files: [],
				success: [],
			}
		},

		methods: {
			// 选择文件
			choice(count, autoUpload) {
				let _this = this
				uni.chooseImage({
					count,
					complete: async function(res) {
						if (res.errMsg !== 'chooseImage:ok') return
						if (autoUpload === undefined) autoUpload = true
						if (autoUpload) return _this.start(res.tempFilePaths)
						_this.$emit('choice', {
							file_url: res.tempFilePaths
						})
					}
				})
			},

	

			// 开始上传
			async start(filePathList) {
				this.files = filePathList
				this.success = []
				uni.showLoading({
					title: '正在上传',
					mask: true
				})
				
				let res = true
				let now = (new Date()).getTime()
				if ((now - this.lastConfigTime) > 10) {
					this.lastConfigTime = now
					res = await this.getUploadConfig()
				}
				if (res) {
					for (let i = 0; i < filePathList.length; i++) {
						await this.uploadToQiNiuYun(filePathList[i], i)
					}
				}
				return this.files
			},

			// 获取上传配置
			async getUploadConfig() {
				const res = await uni.$http.get('/upload/config')
				if (res.data.code !== 0) {
					uni.showToast({
						title: res.data.message,
						icon: 'none'
					})
					return false
				}
				this.config = res.data.data
				return true
			},

			async uploadToQiNiuYun(filePath, index) {
				let _this = this
				let [error, res] = await uni.uploadFile({
					url: _this.config.upload_url,
					filePath: filePath,
					name: _this.config.upload_form_field,
					formData: {
						'token': _this.config.upload_token
					}
				});
				if (res.errMsg !== 'uploadFile:ok') return false
				let data = JSON.parse(res.data)
				this.files[index] = data.data.file_url
				_this.success.push(index)
				_this.$emit('success', data.data)
				if (_this.files.length === _this.success.length) uni.hideLoading()
				return true
			},
		}
	}
</script>
