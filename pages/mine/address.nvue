<template>
	<view>
		<view class="tbc-page-background"></view>
		<scroll-view scroll-y style="flex: 1;flex-direction: column;align-items: center;">
			<view style="height: 20rpx;"></view>
			<view class="tbc-order-address "
				style="width:750rpx;padding: 30rpx;background-color: #FFF;margin-bottom: 20rpx;"
				v-for="(addressInfo) in addressList" :key="addressInfo.address_id">
				<view class="tbc-flex-col" style="flex:1" @click="onItemClick(addressInfo)">
					<view class="tbc-flex-row" style="flex-direction: row;">
						<text style="font-size:30rpx;">{{addressInfo.contact}}</text>
						<text
							style="font-size:28rpx;color:#999;margin-left:20rpx;">{{addressInfo.contact_number}}</text>
					</view>
					<view>
						<text style="font-size:28rpx;margin-top:10rpx;color: #333;">{{addressInfo.full_address}}</text>
					</view>
				</view>
				<view class="tbc-flex-row"
					style="flex-direction: row;padding-top: 30rpx;border-top-width: 1px;border-style: solid;border-color: #F1F1F1;margin-top: 30rpx;">
					<view class="tbc-flex-row" style="flex-direction: row;align-items: center;flex: 1;"
						@click="setDefault(addressInfo)">
						<image src="/static/icon/radio_on.png" style="width: 30rpx;height: 30rpx;margin-right:6rpx;"
							v-if="addressInfo.is_default"></image>
						<image src="/static/icon/radio.png" style="width: 30rpx;height: 30rpx;margin-right:6rpx;"
							v-if="!addressInfo.is_default"></image>
						<text style="font-size: 28rpx;color: #444444;line-height: 40rpx;">默认地址</text>
					</view>
					<view class="tbc-flex-row"
						style="flex-direction: row;align-items: center;justify-content: center;margin-left: 20rpx;"
						v-for="(item) in [{label: '编辑', icon: '/static/icon/edit.png'}, {label: '删除', icon: '/static/icon/delete.png'}]"
						:key="item.label" @click.stop="onButtonClick(addressInfo, item)">
						<image :src="item.icon" style="width: 30rpx;height: 30rpx;margin-right:6rpx;"></image>
						<text style="font-size: 28rpx;color: #444444;line-height: 40rpx;">{{item.label}}</text>
					</view>
				</view>
			</view>

			<none v-if="isShowNone"></none>
		</scroll-view>

		<!-- #ifdef MP-WEIXIN -->
		<view style="height: 120rpx;"></view>
		<view style="position: fixed;bottom: 0;width: 750rpx;height: 110rpx;background-color: #F5F5F5;">
			<view class="tbc-flex-row" style="align-items: center;justify-content: center;height: 110rpx;"
				@click="toAddressForm">
				<view class="tbc-flex-row"
					style="height:80rpx;align-items: center;justify-content: center;background-color: #db0018;width:690rpx;border-radius:80rpx;">
					<text style="color: #fff;font-size: 26rpx;">添加新地址</text>
				</view>
			</view>
		</view>
		<!-- #endif -->
	</view>
</template>

<script>
	import None from '@/components/app/None.nvue'
	export default {

		components: {
			None
		},

		data() {
			return {
				page: 1,
				addressList: [],
				from: '',
				isInitComplete: false,
				isLoading: false,
				isRefreshing: false
			}
		},
		computed: {

			isShowNone() {
				return this.isInitComplete && !this.addressList.length
			}
		},
		onLoad: function(options) {
			if (typeof options.from !== undefined) this.from = options.from
		},

		onShow: function() {
			this.getAddressList()
		},

		onNavigationBarButtonTap: function() {
			this.toAddressForm()
		},

		onPullDownRefresh: function() {
			this.page = 1
			this.getAddressList()
		},

		methods: {

			toAddressForm() {
				uni.navigateTo({
					url: '/pages/mine/address-form'
				})
			},

			onButtonClick(address, item) {
				if (item.label === '删除') {
					let that = this
					return uni.showModal({
						title: '提示',
						content: "确定要删除吗？",
						complete: async function(ret) {
							if (ret.cancel) return
							const res = await uni.$http.post('/user.address/delete', {
								address_id: address.address_id
							});
							if (res.data.code !== 0) {
								return uni.showToast({
									title: res.data.message,
									icon: 'none'
								})
							}
							that.getAddressList()
						}
					})
				}
				uni.navigateTo({
					url: "/pages/mine/address-form?address_id=" + address.address_id
				})
			},

			onItemClick(addressInfo) {
				if (this.from === 'settlement') {
					uni.setStorageSync('settlement@address', addressInfo)
					uni.navigateBack()
				}
			},

			async getAddressList() {
				const res = await uni.$http.get('/user.address', {
					page: this.page,
					size: 1000
				})
				this.isInitComplete = true
				uni.stopPullDownRefresh()
				if (res.data.code !== 0) {
					return uni.showToast({
						title: res.data.message,
						icon: 'none'
					})
				}
				let data = res.data.data
				this.addressList = data.list
			},

			async setDefault(address) {
				if (address.is_default) return
				let form = JSON.parse(JSON.stringify(address))
				form.is_default = 1
				const res = await uni.$http.post('/user.address/edit', form)
				if (res.data.code !== 0) {
					return uni.showToast({
						title: res.data.message,
						icon: 'none'
					})
				}
				this.getAddressList()
			}
		}
	}
</script>
